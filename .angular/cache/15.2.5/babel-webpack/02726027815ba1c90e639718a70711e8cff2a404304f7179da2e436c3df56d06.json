{"ast":null,"code":"import { Estado } from \"../models/Estado\";\nexport class CasillaService {\n  generarTablero(filas, columnas, minas) {\n    let tablero = Array.from({\n      length: filas\n    }, () => this.crearFila(columnas));\n    this.generarMinas(minas, tablero);\n    this.obtenerMinasAlrededor(tablero);\n    return tablero;\n  }\n  crearFila(columnas) {\n    return Array.from({\n      length: columnas\n    }, () => ({\n      status: 'toOpen',\n      mina: false,\n      minasAlrededor: 0\n    }));\n  }\n  generarMinas(minas, tablero) {\n    const filas = tablero.length;\n    const columnas = tablero[0].length;\n    const set = new Set();\n    while (set.size < minas) {\n      const fila = Math.floor(Math.random() * filas);\n      const columna = Math.floor(Math.random() * columnas);\n      const key = `${fila},${columna}`;\n      if (!set.has(key)) {\n        set.add(key);\n        tablero[fila][columna].mina = true;\n      }\n    }\n  }\n  verificarMina(tablero, i, j, casilla) {\n    if (tablero[i + casilla[0]][j + casilla[1]].mina) {\n      return 1;\n    }\n    return 0;\n  }\n  obtenerMinasAlrededor(tablero) {\n    const direcciones = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\n    const filas = tablero.length;\n    const columnas = tablero[0].length;\n    for (let i = 0; i < filas; i++) {\n      for (let j = 0; j < columnas; j++) {\n        if (!tablero[i][j].mina) {\n          tablero[i][j].minasAlrededor = this.contarMinasAlrededor(i, j, tablero, direcciones);\n        }\n      }\n    }\n  }\n  contarMinasAlrededor(fila, columna, tablero, direcciones) {\n    return direcciones.reduce((contador, [dx, dy]) => {\n      const nuevaFila = fila + dx;\n      const nuevaColumna = columna + dy;\n      if (this.validarRango(nuevaFila, nuevaColumna, tablero.length, tablero[0].length) && tablero[nuevaFila][nuevaColumna].mina) {\n        return contador + 1;\n      }\n      return contador;\n    }, 0);\n  }\n  Dificultad(difficulty) {\n    switch (difficulty) {\n      case \"Facil\":\n        return [8, 8, 12];\n      case \"Medio\":\n        return [12, 12, 20];\n      case \"Dificil\":\n        return [18, 18, 35];\n      default:\n        return [50, 50, 100];\n    }\n  }\n  cambiarEstado(board, row, column, cellsGame, numberOfMines, gameEstate) {\n    if (board[row][column].mina) {\n      board[row][column].status = 'mine';\n      this.verificarEstadoCasilla(board);\n      return Estado.noactivo;\n    } else if (cellsGame.cellsOpened >= cellsGame.cells - cellsGame.numberMines) {\n      return Estado.victoria;\n    }\n    return Estado.activo;\n  }\n  verificarEstadoCasilla(board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j].mina) {\n          board[i][j].status = 'mine';\n        }\n      }\n    }\n  }\n  validarRango(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  abrirCelda(tablero, fila, columna, casillas) {\n    if (!this.validarRango(fila, columna, tablero.length, tablero[0].length) || tablero[fila][columna].status === 'open' || tablero[fila][columna].mina) {\n      return;\n    }\n    tablero[fila][columna].status = 'open';\n    casillas.cellsOpened += 1;\n    if (tablero[fila][columna].minasAlrededor === 0) {\n      const direcciones = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n      direcciones.forEach(([dx, dy]) => this.abrirCelda(tablero, fila + dx, columna + dy, casillas));\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Estado","CasillaService","generarTablero","filas","columnas","minas","tablero","Array","from","length","crearFila","generarMinas","obtenerMinasAlrededor","status","mina","minasAlrededor","set","Set","size","fila","Math","floor","random","columna","key","has","add","verificarMina","i","j","casilla","direcciones","contarMinasAlrededor","reduce","contador","dx","dy","nuevaFila","nuevaColumna","validarRango","Dificultad","difficulty","cambiarEstado","board","row","column","cellsGame","numberOfMines","gameEstate","verificarEstadoCasilla","noactivo","cellsOpened","cells","numberMines","victoria","activo","rows","columns","abrirCelda","casillas","forEach"],"sourceRoot":"","sources":["F:\\Diky\\Desktop\\Programacio II\\Buscaminas\\src\\app\\services\\casilla.service.ts"],"sourcesContent":["import { Casilla } from \"../models/Casilla\";\r\nimport { Estado } from \"../models/Estado\";\r\n\r\nexport class CasillaService{\r\n\r\n    generarTablero(filas: number, columnas: number, minas: number): Casilla[][] {\r\n        let tablero: Casilla[][] = Array.from({ length: filas }, () => this.crearFila(columnas));\r\n        this.generarMinas(minas, tablero);\r\n        this.obtenerMinasAlrededor(tablero);\r\n        return tablero;\r\n      }\r\n\r\n    crearFila(columnas: number): Casilla[] {\r\n        return Array.from({ length: columnas }, () => ({ status: 'toOpen', mina: false, minasAlrededor: 0 }));\r\n      }\r\n\r\n    generarMinas(minas: number, tablero: Casilla[][]): void {\r\n        const filas = tablero.length;\r\n        const columnas = tablero[0].length;\r\n        const set = new Set<string>();\r\n        while (set.size < minas) {\r\n            const fila = Math.floor(Math.random() * filas);\r\n            const columna = Math.floor(Math.random() * columnas);\r\n            const key = `${fila},${columna}`;\r\n    \r\n            if (!set.has(key)) {\r\n            set.add(key);\r\n            tablero[fila][columna].mina = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    verificarMina(tablero: Casilla[][], i: number, j: number, casilla: number[], ) : number\r\n    {\r\n        if(tablero[i + casilla[0]][ j + casilla[1]].mina){ return 1; }\r\n        return 0;\r\n    }\r\n\r\n    obtenerMinasAlrededor(tablero: Casilla[][]): void {\r\n    const direcciones = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\r\n    const filas = tablero.length;\r\n    const columnas = tablero[0].length;\r\n\r\n    for (let i = 0; i < filas; i++) {\r\n      for (let j = 0; j < columnas; j++) {\r\n        if (!tablero[i][j].mina) {\r\n          tablero[i][j].minasAlrededor = this.contarMinasAlrededor(i, j, tablero, direcciones);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  contarMinasAlrededor(fila: number, columna: number, tablero: Casilla[][], direcciones: number[][]): number {\r\n    return direcciones.reduce((contador, [dx, dy]) => {\r\n      const nuevaFila = fila + dx;\r\n      const nuevaColumna = columna + dy;\r\n      if (this.validarRango(nuevaFila, nuevaColumna, tablero.length, tablero[0].length) && tablero[nuevaFila][nuevaColumna].mina) {\r\n        return contador + 1;\r\n      }\r\n      return contador;\r\n    }, 0);\r\n  }\r\n\r\n    Dificultad(difficulty: string): [number, number, number] {\r\n        switch (difficulty) {\r\n          case \"Facil\":\r\n            return [8, 8, 12];\r\n          case \"Medio\":\r\n            return [12, 12, 20];\r\n          case \"Dificil\":\r\n            return [18, 18, 35];\r\n          default:\r\n            return [50, 50, 100];\r\n        }\r\n      }\r\n\r\n    cambiarEstado(board: Casilla[][], row: number, column: number, cellsGame: any, numberOfMines: number, gameEstate: Estado) : Estado{\r\n        \r\n        if(board[row][column].mina){\r\n            board[row][column].status = 'mine';\r\n            this.verificarEstadoCasilla(board);\r\n            return Estado.noactivo;\r\n        }\r\n        else if((cellsGame.cellsOpened) >= (cellsGame.cells - cellsGame.numberMines)){\r\n            return Estado.victoria;\r\n        }\r\n    \r\n        return Estado.activo;\r\n    }\r\n\r\n    verificarEstadoCasilla(board: Casilla[][]){\r\n        for(let i = 0; i < board.length; i++){\r\n            for(let j = 0; j < board[i].length; j++){\r\n                if(board[i][j].mina){\r\n                    board[i][j].status = 'mine';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    validarRango(i: number, j: number, rows: number, columns: number) : boolean{\r\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    abrirCelda(tablero: Casilla[][], fila: number, columna: number, casillas: any): void {\r\n        if (!this.validarRango(fila, columna, tablero.length, tablero[0].length) || tablero[fila][columna].status === 'open' || tablero[fila][columna].mina) {\r\n          return;\r\n        }\r\n    \r\n        tablero[fila][columna].status = 'open';\r\n        casillas.cellsOpened += 1;\r\n    \r\n        if (tablero[fila][columna].minasAlrededor === 0) {\r\n          const direcciones = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]];\r\n          direcciones.forEach(([dx, dy]) => this.abrirCelda(tablero, fila + dx, columna + dy, casillas));\r\n        }\r\n      }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}